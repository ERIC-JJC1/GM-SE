--- a/train/train_tagru_weakly.py
+++ b/train/train_tagru_weakly.py
@@ -25,29 +25,8 @@
 # ================== 关键改动 2: 保留评估工具 ==================
 # 我们仍然需要 ac_model.py 中的评估函数
 # 来计算 RMSE，以便与 "x_true" 进行 *比较*
-from physics.ac_model import h_measure
-
-def theta_wrap(pred, gt):
-    return (pred - gt + math.pi) % (2*math.pi) - math.pi
-
-def rmse_metrics(x_hat, x_true):
-    """
-    使用 Numpy 计算 RMSE (仅用于评估，不可微分)
-    """
-    # 确保在 CPU 和 Numpy 上
-    x_hat_np = x_hat.detach().cpu().numpy()
-    x_true_np = x_true.detach().cpu().numpy()
-    
-    N = x_true_np.shape[-1] // 2
-    # 假设 x_hat 是 [vm, va]
-    dth = theta_wrap(x_hat_np[..., N:], x_true_np[..., N:])
-    dv  = x_hat_np[..., :N] - x_true_np[..., :N]
-    th_rmse = np.sqrt(np.mean(dth**2)) * 180.0 / math.pi
-    vm_rmse = np.sqrt(np.mean(dv**2))
-    return float(th_rmse), float(vm_rmse)
+# from physics.ac_model import h_measure # h_measure 似乎未被使用
+from tools.metrics import rmse_metrics # 导入
 # ==========================================================
 
 # --- 数据加载器 (保持不变) ---
@@ -194,7 +173,8 @@
 
                 # ================== 关键改动 7: 评估指标 ==================
                 # 仅用于 *报告*：计算 RMSE
-                th_rmse, vm_rmse = rmse_metrics(x_hat, x_gt)
+                # 注意：tagru 的 state_order 是 'vm_va'
+                th_rmse, vm_rmse = rmse_metrics(x_hat, x_gt, state_order='vm_va')
                 ths.append(th_rmse); vms.append(vm_rmse)
                 # =========================================================
 
@@ -226,7 +206,7 @@
             x_hat = model(z_seq, feat_seq, A_time=A, E_time=E)
             
             # 仅用于 *报告*：计算 RMSE
-            th_rmse, vm_rmse = rmse_metrics(x_hat, x_gt)
+            th_rmse, vm_rmse = rmse_metrics(x_hat, x_gt, state_order='vm_va')
             ths.append(th_rmse); vms.append(vm_rmse)
             
         print(f"[TEST] θ-RMSE={np.mean(ths):.3f}°, |V|-RMSE={np.mean(vms):.4f}")